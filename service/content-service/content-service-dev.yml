# content-service : dev
server:
  port: 8082

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://127.0.0.1:9090
  data:
    mongodb:
      uri: mongodb://admin:Code%40Advisors2024@34.50.73.18:27017/
      authentication-database: admin
      database: content-service
  # data:
  #   mongodb:
  #     uri: mongodb://localhost:27017/content-service
  kafka:
    bootstrap-servers:
      - 167.172.78.79:9092
      - 167.172.78.79:9093
      - 167.172.78.79:9094
    # consumer:
    #   group-id: content-service
    #   auto-offset-reset: latest
    #   # key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    #   key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
    #   value-deserializer: co.istad.content_service.config.kafka.BaseProducerDeserializer
    #   properties:
    #     spring.json.trusted.packages: "*"
    consumer:
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: co.istad.content_service.config.kafka.BaseProducerDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: co.istad.content_service.config.kafka.BaseProducer

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.trusted.packages: "*"

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://167.172.78.79:8761/eureka/
#logging:
#  level:
#    org:
#      springframework:
#        kafka: debug

